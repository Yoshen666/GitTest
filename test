import gc
import logging
import os

from xinxiang import config
from xinxiang.util import my_duck, my_oracle, my_date, cons_error_code, cons, my_postgres, my_runner


def create_temp_table(duck_db):
    table_type = ""
    if not config.g_debug_mode:
        table_type = 'TEMP'
    '''
    这里在内存中创建使用到的临时表
    '''
    sql = """
    create table APS_TMP_ETL_MASK_INFO_STATUS
    (
         reticle_id  VARCHAR(128),
         mask_status VARCHAR(64)
    )
    """.format(table_type=table_type)
    duck_db.sql(sql)
    sql = """
    create table APS_TMP_ETL_MASK_INFO_HIST
    (
        rtcl_id   VARCHAR(64),
        loc_id    VARCHAR(64),
        timestamp VARCHAR(64)
    )
    """.format(table_type=table_type)
    duck_db.sql(sql)
    sql = """
    create table APS_TMP_ETL_MASK_INFO_LAST_POSITION
    (
       rtcl_id VARCHAR(64),
       loc_id  VARCHAR(64)
    )
    """.format(table_type=table_type)
    duck_db.sql(sql)

def biz_method_02(duck_db_memory, uuid, current_time, oracle_conn, ETL_Proc_Name):
    sql = """
        INSERT /*+ append */
         INTO APS_ETL_MASK_INFO
           (PARENTID,
            RETICLE_GROUP,
            RETICLE_ID,
            RETICLE_COUNT,
            POSITION,
            POSITION_TIME,
            RETICLE_STATUS,
            INSPECTION_TIME,
            RUN_QTY,
            RUN_LBOUND,
            RUN_UBOUND,
            UPDATE_TIME,
            PARTCODE,
            LAST_POSITION)
           WITH MASK_INFO AS
            (SELECT MAX(M.MASK_GROUP) AS MASK_GROUP,
                    M.RTCL_ID,
                    MAX(M.STATUS) AS STATUS,
                    MAX(M.NEXT_RESCREEN_TM) AS NEXT_RESCREEN_TM,
                    MAX(M.TARGET) AS TARGET,
                    MAX(M.LAST_PTNCHK_ACT) AS LAST_PTNCHK_ACT,
                    MAX(UE.TTL) AS TTL,
                    MAX(M.LOC_ID) AS LOC_ID,
                    MAX(M.LAST_UPDATE_TM) AS LAST_UPDATE_TIME
               FROM APS_SYNC_MASK_INFO.APS_SYNC_MASK_INFO M
               LEFT JOIN APS_SYNC_RETICLE_USE.APS_SYNC_RETICLE_USE UE
                 ON UE.RETICLE_ID = M.RTCL_ID
              GROUP BY M.RTCL_ID)
           SELECT '{uuid}' AS PARENTID,
                  MI.MASK_GROUP AS RETICLE_GROUP,
                  MI.RTCL_ID AS RETICLE_ID,
                  CAST('1' AS INTEGER) AS RETICLE_COUNT,
                  MI.LOC_ID AS POSITION,
                  --TO_CHAR(MI.LAST_UPDATE_TIME, 'YYYY-MM-DD HH24:MI:SS') AS POSITION_TIME,
                  CAST(STRFTIME(MI.LAST_UPDATE_TIME, '%Y-%m-%d %H:%M:%S') AS TIMESTAMP) AS POSITION_TIME,
                  COALESCE((CASE
                        WHEN MS.MASK_STATUS = 'AVAILABLE' THEN 'ACTIVE'
                        WHEN MS.MASK_STATUS = 'INUSE' THEN 'MES-INUSE'
                        ELSE
                         MS.MASK_STATUS
                      END),
                      'NOTFOUND') AS RETICLE_STATUS,
                  --TO_CHAR(MI.NEXT_RESCREEN_TM, 'YYYY-MM-DD HH24:MI:SS') AS INSPECTION_TIME,                  
                  CAST(STRFTIME(MI.NEXT_RESCREEN_TM, '%Y-%m-%d %H:%M:%S') AS TIMESTAMP) AS INSPECTION_TIME,
                  (CASE
                    WHEN (CAST(MI.TTL AS DECIMAL(18,2)) - CAST(MI.LAST_PTNCHK_ACT AS DECIMAL(18,2)) ) < 0 THEN
                     CAST('0' AS DECIMAL)
                    ELSE
                     (CAST(MI.TTL AS DECIMAL(18,2)) - CAST(MI.LAST_PTNCHK_ACT AS DECIMAL(18,2)))
                  END) AS RUN_QTY,
                  CAST(NULLIF('','') AS DECIMAL(18,3)) AS RUN_IBOUND,
                  CAST(MI.TARGET AS DECIMAL) AS RUN_UBOUND,
                  CAST('{current_time}' AS TIMESTAMP)  AS UPDATE_TIME,
                  '' AS PARTCODE,
                  CASE
                    WHEN MI.LOC_ID = 'TMP_AUTO' THEN
                     LP.LOC_ID
                    ELSE
                     NULL
                  END AS LAST_POSITION
             FROM MASK_INFO MI
             LEFT JOIN {tempdb}APS_TMP_ETL_MASK_INFO_STATUS MS
               ON MS.RETICLE_ID = MI.RTCL_ID
             LEFT JOIN {tempdb}APS_TMP_ETL_MASK_INFO_LAST_POSITION LP
               ON LP.RTCL_ID = MI.RTCL_ID      
             LEFT JOIN (SELECT * FROM APS_SYNC_MCS_SCHED_LOCATION_INFO.APS_SYNC_MCS_SCHED_LOCATION_INFO
                        WHERE MASK_NOT_AVAILABLE = 'Y') LI
               ON LP.RTCL_ID = MI.RTCL_ID                                         
            
    """.format(uuid=uuid, current_time=current_time, tempdb=my_duck.get_temp_table_mark())

    my_duck.exec_sql(oracle_conn=oracle_conn,
                     duck_db_memory=duck_db_memory,
                     ETL_Proc_Name=ETL_Proc_Name,
                     methodName="Insert Into APS_ETL_MASK_INFO",
                     sql=sql,
                     current_time=current_time,
                     update_table="APS_ETL_MASK_INFO")


def biz_method_01(duck_db_memory, uuid, current_time, oracle_conn, ETL_Proc_Name):
    sql = """
        INSERT INTO {tempdb}APS_TMP_ETL_MASK_INFO_STATUS(                                     
        RETICLE_ID,MASK_STATUS                                                                            
        )                                                                                             
         SELECT T.RETICLE_ID,                                                                                          
                T.MASK_STATUS                                                                                                  
         FROM APS_SYNC_MASK_MES_STATUS.APS_SYNC_MASK_MES_STATUS T                                                                     
    """.format(current_time=current_time, tempdb=my_duck.get_temp_table_mark())

    my_duck.exec_sql(oracle_conn=oracle_conn,
                     duck_db_memory=duck_db_memory,
                     ETL_Proc_Name=ETL_Proc_Name,
                     methodName="Insert Into APS_TMP_ETL_MASK_INFO_STATUS",
                     sql=sql,
                     current_time=current_time,
                     update_table="APS_TMP_ETL_MASK_INFO_STATUS")
    sql = """
        INSERT INTO {tempdb}APS_TMP_ETL_MASK_INFO_HIST(                                  
         RTCL_ID,LOC_ID,TIMESTAMP                                                                     
        )                                                                                        
         SELECT H.RTCL_ID,H.LOC_ID, H.TIMESTAMP                                                  
         FROM APS_TMP_MASK_HISTORY_VIEW.APS_TMP_MASK_HISTORY_VIEW H                                  
         WHERE POSITION('TMP_AUTO' IN H.LOC_ID)=0 
         AND H.timestamp > DATE_TRUNC('second', CURRENT_TIMESTAMP) - INTERVAL '90 day'
    """.format(current_time=current_time, tempdb=my_duck.get_temp_table_mark())

    my_duck.exec_sql(oracle_conn=oracle_conn,
                     duck_db_memory=duck_db_memory,
                     ETL_Proc_Name=ETL_Proc_Name,
                     methodName="Insert Into APS_TMP_ETL_MASK_INFO_HIST",
                     sql=sql,
                     current_time=current_time,
                     update_table="APS_TMP_ETL_MASK_INFO_HIST")
    sql = """
         INSERT INTO {tempdb}APS_TMP_ETL_MASK_INFO_LAST_POSITION(                              
         RTCL_ID,LOC_ID                                                                              
        )                                                                                             
         SELECT RTCL_ID,LOC_ID                                                                       
         FROM (                                                                                      
           SELECT H.RTCL_ID,H.LOC_ID,                                                           
                  ROW_NUMBER() OVER (PARTITION BY H.RTCL_ID ORDER BY H.TIMESTAMP DESC)  AS NUM  
           FROM {tempdb}APS_TMP_ETL_MASK_INFO_HIST H                                            
         ) N                                                                                         
         WHERE N.NUM = 1                                                                                          
    """.format(current_time=current_time, tempdb=my_duck.get_temp_table_mark())

    my_duck.exec_sql(oracle_conn=oracle_conn,
                     duck_db_memory=duck_db_memory,
                     ETL_Proc_Name=ETL_Proc_Name,
                     methodName="Insert Into APS_TMP_ETL_MASK_INFO_LAST_POSITION",
                     sql=sql,
                     current_time=current_time,
                     update_table="APS_TMP_ETL_MASK_INFO_LAST_POSITION")


def execute():
    ###############################################################
    ### 以下参数必须定义
    ### ETL_Proc_Name    : ETL 名称
    ### current_time     ：请直接拷贝
    ### current_time_short ：请直接拷贝
    ### uuid             ：请直接拷贝
    ### target_table     : 该ETL输出表名
    ### used_table_list  : 该ETL使用到的，参考到的表名(中间表不算)
    ### target_table_sql ： 该ETL输出表定义SQL
    ###############################################################
    ETL_Proc_Name = "APS_ETL_BR.APS_ETL_MASK_INFO_5M"
    current_time = my_date.date_time_second_str()
    current_time_short = my_date.date_time_second_short_str()
    uuid = my_oracle.UUID()

    target_table = "APS_ETL_MASK_INFO"
    used_table_list = ['APS_SYNC_MASK_INFO',
                       'APS_SYNC_RETICLE_USE',
                       'APS_SYNC_MASK_MES_STATUS',
                       'APS_TMP_MASK_HISTORY_VIEW,'
                       'APS_SYNC_MCS_SCHED_LOCATION_INFO']
    target_table_sql = """
        create table {}APS_ETL_MASK_INFO
        (
            parentid        VARCHAR(60) not null,
            reticle_group   VARCHAR(60),
            reticle_id      VARCHAR(60) not null,
            reticle_count   INTEGER,
            position        VARCHAR(60) not null,
            position_time   TIMESTAMP not null,
            reticle_status  VARCHAR(60) not null,
            inspection_time TIMESTAMP,
            run_qty         DECIMAL,
            run_lbound      DECIMAL,
            run_ubound      DECIMAL,
            update_time     TIMESTAMP not null,
            partcode        VARCHAR(60) not null,
            last_position   VARCHAR(60),
            PRIMARY KEY (PARENTID, RETICLE_ID, PARTCODE)
        )
    """.format("") # 注意:这里一定要这么写 [create table 表名] => [create table {}表名]
    target_db_file = my_duck.get_target_file_name(target_table, current_time_short)

    # -------------------------- 内存模式改成文件模式
    _temp_db_path = os.path.join(config.g_mem_speed_etl_output_path, target_table, "inprocess")
    if not os.path.exists(_temp_db_path):
        os.makedirs(_temp_db_path)

    temp_db_file = os.path.join(_temp_db_path, target_table + "_" + current_time_short + "_temp.db")
    # 处理中文件
    in_process_db_file = os.path.join(_temp_db_path, target_table + "_" + current_time_short + ".db")
    # 结果文件
    target_db_file = os.path.join(config.g_mem_etl_output_path, target_table,
                                  target_table + "_" + current_time_short + ".db")
    # --------------------------

    oracle_conn = None
    try:
        oracle_conn = my_oracle.oracle_get_connection()
        # 开始日志
        my_oracle.StartCleanUpAndLog(oracle_conn, ETL_Proc_Name, current_time)

        # -------------------------- 内存模式改成文件模式
        # 创建DuckDB
        duck_db_memory = my_duck.create_duckdb_in_file(_temp_db_path, in_process_db_file, target_table_sql)
        duck_db_memory.sql('SET threads TO 4')
        if not os.path.exists(os.path.join(config.g_mem_speed_etl_output_path, 'duck_temp', uuid)):
            os.makedirs(os.path.join(config.g_mem_speed_etl_output_path, 'duck_temp', uuid))
        duck_db_memory.execute(
            "SET temp_directory='{}'".format(os.path.join(config.g_mem_speed_etl_output_path, 'duck_temp', uuid)))

        if not config.g_debug_mode:
            create_temp_table(duck_db_memory)
        else:
            duck_db_temp = my_duck.create_duckdb_for_temp_table(_temp_db_path, temp_db_file)
            # 创建Temp表
            create_temp_table(duck_db_temp)
            duck_db_temp.commit()
            duck_db_temp.close()
            my_duck.attach_temp_db_write_able(duck_db_memory, "TEMPDB", temp_db_file)
        # --------------------------

        # Attach用到的表
        my_duck.attach_used_table(oracle_conn, duck_db_memory, used_table_list)
        ################################################################################################################
        ## 以下为业务逻辑
        ################################################################################################################

        biz_method_01(duck_db_memory, uuid, current_time, oracle_conn, ETL_Proc_Name)

        row_count = my_duck.get_row_count_in_duckdb(duck_db=duck_db_memory, tableName="{tempdb}APS_TMP_ETL_MASK_INFO_LAST_POSITION".format(tempdb=my_duck.get_temp_table_mark()))
        if row_count == 0:
            my_oracle.EndCleanUpAndLog(oracle_conn, ETL_Proc_Name, current_time, "APS_TMP_ETL_MASK_INFO_LAST_POSITION没有数据，请及时确认一下！！")
            return

        biz_method_02(duck_db_memory, uuid, current_time, oracle_conn, ETL_Proc_Name)

        ################################################################################################################
        ## 写入log
        ################################################################################################################
        # 写版本号
        my_oracle.Monitor_HandlingVerControl(oracle_conn, uuid, target_table, target_db_file, current_time_short)

        ################################################################################################################
        ## 以上为业务逻辑
        ################################################################################################################
        if config.g_copy_to_pg and my_runner.judge_main_server(oracle_conn):
            select_sql_in_duck = """select parentid,
                                           CASE WHEN reticle_group='' THEN NULL ELSE reticle_group END AS reticle_group,
                                           CASE WHEN reticle_id='' THEN NULL ELSE reticle_id END AS reticle_id,
                                           reticle_count, 
                                           CASE WHEN position='' THEN NULL ELSE position END AS position, 
                                           position_time, 
                                           CASE WHEN reticle_status='' THEN NULL ELSE reticle_status END AS reticle_status,
                                           inspection_time, 
                                           run_qty,run_lbound,run_ubound,update_time,
                                           CASE WHEN last_position='' THEN NULL ELSE last_position END AS last_position 
                                           from APS_ETL_MASK_INFO
                                        """
            postgres_table_define = """etl_mask_info(parentid,reticle_group,reticle_id,reticle_count,position, position_time, reticle_status,inspection_time, 
                                                     run_qty,run_lbound,run_ubound,update_time,last_position)
                                    """
            my_postgres.copy_duckdb_to_postgres(uuid=uuid,
                                                duckdb=duck_db_memory,
                                                table_name_in_duckdb=target_table,
                                                table_name_in_pg="etl_mask_info",  # 要小写
                                                select_sql_in_duck=select_sql_in_duck,
                                                postgres_table_define=postgres_table_define,
                                                oracle_conn=oracle_conn,
                                                ETL_Proc_Name=ETL_Proc_Name)
        # 导出到目标文件中
        target_db_file = my_duck.export_result_duck_file_and_close_duck_db_memory2(duck_db_memory,
                                                                                   in_process_db_file=in_process_db_file,
                                                                                   target_table=target_table,
                                                                                   current_time=current_time_short)
        # 写版本号
        my_oracle.HandlingVerControl(oracle_conn, uuid, target_table, target_db_file, current_time_short)
        # 加入PG执行结束的时间更新
        my_oracle.Update_PG_HandlingVerControl(oracle_conn, uuid, target_table, target_db_file, current_time_short)
        # 写完成日志
        my_oracle.EndCleanUpAndLog(oracle_conn, ETL_Proc_Name, current_time)
    except Exception as e:
        logging.exception("{ETL_Proc_Name} 處理出錯 : {e}".format(ETL_Proc_Name=ETL_Proc_Name, e=e))
        # 导出到目标文件中
        my_duck.export_result_duck_file_and_close_duck_db_memory2(duck_db_memory,
                                                                  in_process_db_file=in_process_db_file,
                                                                  target_table=target_table,
                                                                  current_time=current_time_short)
        # 写警告日志
        my_oracle.SaveAlarmLogData(oracle_conn, ETL_Proc_Name, e, target_db_file,
                                   cons_error_code.APS_ETL_MASK_INFO_CODE_XX_ETL)
        raise e
    finally:
        oracle_conn.commit()
        oracle_conn.close()
        # 删除TMP目录:LQN:2023/08/21
        if os.path.exists(os.path.join(config.g_mem_etl_output_path, 'duck_temp', uuid)):
            os.remove(os.path.join(config.g_mem_etl_output_path, 'duck_temp', uuid))
        if os.path.exists(temp_db_file) and not config.g_debug_mode:
            os.remove(temp_db_file)
        gc.collect()  # 内存释放


if __name__ == '__main__':
    # 单JOB测试用
    print("start")
    execute()
